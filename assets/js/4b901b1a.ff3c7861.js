"use strict";(self.webpackChunk_manekiswap_document=self.webpackChunk_manekiswap_document||[]).push([[6022],{5239:function(e){e.exports=JSON.parse('{"name":"documentation","permalink":"/tags/documentation","docs":[{"id":"concepts/governance/05-adversarial-circumstances","title":"Adversarial Circumstances","description":"This document explores some adversarial circumstances which Uniswap Governance may encounter in the future. Its goal is to help those interested in Uniswap Governance understand the reasoning behind some of its design, its limitations, and potential avenues for growth.","permalink":"/concepts/governance/05-adversarial-circumstances"},{"id":"reference/API/01-overview","title":"API Overview","description":"This section explains the Uniswap Subgraph and how to interact with it. The Uniswap subgraph indexes data from the Uniswap contracts over time. It organizes data about pairs, tokens, Uniswap as a whole, and more. The subgraph updates any time a transaction is made on Uniswap. The subgraph runs on The Graph protocol\'s hosted service and can be openly queried.","permalink":"/reference/"},{"id":"concepts/governance/03-guide-to-voting","title":"Beginners Guide to Voting","description":"This guide contains everything you need to start voting in Uniswap Governance.","permalink":"/concepts/governance/03-guide-to-voting"},{"id":"guides/smart-contract-integration/04-building-an-oracle","title":"Building an Oracle","description":"To build a price oracle on Uniswap V2, you must first understand the","permalink":"/guides/smart-contract-integration/04-building-an-oracle"},{"id":"reference/smart-contracts/common-errors","title":"Common Errors","description":"This document covers a few error codes freqeuently encountered while building on Uniswap V2.","permalink":"/reference/smart-contracts/common-errors"},{"id":"guides/interface-integration/02-custom-interface-linking","title":"Custom Linking","description":"The Uniswap front-end supports URL query parameters to allow for custom linking to the Uniswap frontend. Users and developers can use these query parameters to link to the Uniswap frontend with custom prefilled settings.","permalink":"/guides/interface-integration/02-custom-interface-linking"},{"id":"concepts/protocol-overview/02-ecosystem-participants","title":"Ecosystem Participants","description":"The Uniswap ecosystem is primarily comprised of three types of users: liquidity providers, traders, and developers. Liquidity providers are incentivized to contribute ERC-20 tokens to common liquidity pools. Traders can swap these tokens for one another for a fixed 0.30% fee (which goes to liquidity providers). Developers can integrate directly with Uniswap smart contracts to power new and exciting interactions with tokens, trading interfaces, retail experiences, and more.","permalink":"/concepts/protocol-overview/02-ecosystem-participants"},{"id":"reference/API/02-entities","title":"Entities","description":"Entities define the schema of the subgraph, and represent the data that can be queried. Within each entity are sets of fields that store useful information related to the entity. Below is a list of the available entities within the Uniswap Subgraph, and descriptions for the available fields.","permalink":"/reference/API/02-entities"},{"id":"reference/smart-contracts/01-factory","title":"Factory","description":"UniswapV2Factory.sol","permalink":"/reference/smart-contracts/01-factory"},{"id":"concepts/advanced-topics/01-fees","title":"Fees","description":"Liquidity provider fees","permalink":"/concepts/advanced-topics/01-fees"},{"id":"reference/SDK/07-fetcher","title":"Fetcher","description":"The data fetching logic is split from the rest of the code for better tree-shaking,","permalink":"/reference/SDK/07-fetcher"},{"id":"guides/javascript-sdk/02-fetching-data","title":"Fetching Data","description":"Looking for a quickstart?","permalink":"/guides/javascript-sdk/02-fetching-data"},{"id":"concepts/core-concepts/03-flash-swaps","title":"Flash Swaps","description":"Uniswap flash swaps\xa0allow you to withdraw up to the full reserves of any ERC20 token on Uniswap and execute arbitrary logic at no upfront cost, provided that by the end of the transaction you either:","permalink":"/concepts/core-concepts/03-flash-swaps"},{"id":"guides/smart-contract-integration/05-using-flash-swaps","title":"Flash Swaps","description":"Flash swaps are an integral feature of Uniswap V2. In fact, under the hood, all swaps are actually flash swaps! This simply means that pair contracts send output tokens to the recipient before enforcing that enough input tokens have been received. This is slightly atypical, as one might expect a pair to ensure it\'s received payment before delivery. However, because Ethereum transactions are atomic, we can roll back the entire swap if it turns out that the contract hasn\'t received enough tokens to make itself whole by the end of the transaction.","permalink":"/guides/smart-contract-integration/05-using-flash-swaps"},{"id":"reference/SDK/06-fractions","title":"Fractions","description":"The base class which all subsequent fraction classes extend. Not meant to be used directly.","permalink":"/reference/SDK/06-fractions"},{"id":"reference/SDK/01-getting-started","title":"Getting Started","description":"The pages that follow contain technical reference information on the Uniswap SDK.","permalink":"/reference/SDK/01-getting-started"},{"id":"concepts/governance/04-glossary","title":"Glossary","description":"- UNI: An ERC-20 token that designates the weight of a user&#39;s voting rights. The more UNI a user has in their wallet, the more weight their delegation or vote on a proposal holds.","permalink":"/concepts/governance/04-glossary"},{"id":"concepts/protocol-overview/04-glossary","title":"Glossary","description":"Automated market maker","permalink":"/concepts/protocol-overview/04-glossary"},{"id":"concepts/governance/06-governance-reference","title":"Governance Reference","description":"Uniswap protocol is goverened and upgraded by UNI token holders, using three distinct components; the UNI token, governance module, and Timelock. Together, these contracts allow the community to propose, vote, and implement changes to the uniswap protocol.","permalink":"/concepts/governance/06-governance-reference"},{"id":"reference/Governance/05-governance-reference","title":"Governance Reference","description":"Uniswap protocol is goverened and upgraded by UNI token holders, using three distinct components; the UNI token, governance module, and Timelock. Together, these contracts allow the community to propose, vote, and implement changes to the uniswap protocol.","permalink":"/reference/Governance/05-governance-reference"},{"id":"concepts/protocol-overview/01-how-uniswap-works","title":"How Uniswap works","description":"Uniswap is an automated liquidity protocol powered by a constant product formula","permalink":"/"},{"id":"guides/interface-integration/03-iframe-integration","title":"Iframe Integration","description":"Uniswap can be used within other sites as an iframe. An iframe shows an exact version of the uniswap frontend site and can have custom prefilled settings.","permalink":"/guides/interface-integration/03-iframe-integration"},{"id":"guides/smart-contract-integration/02-trading-from-a-smart-contract","title":"Implement a Swap","description":"When trading from a smart contract, the most important thing to keep in mind is that access to an external price source is required. Without this, trades can be frontrun for considerable loss.","permalink":"/guides/smart-contract-integration/02-trading-from-a-smart-contract"},{"id":"reference/smart-contracts/library","title":"Library","description":"UniswapV2Library.sol","permalink":"/reference/smart-contracts/library"},{"id":"concepts/advanced-topics/05-math","title":"Math","description":"This section will be expanded in the future. In the mean time, the Uniswap V2 whitepaper has most relevant math for Uniswap V2.","permalink":"/concepts/advanced-topics/05-math"},{"id":"concepts/core-concepts/04-oracles","title":"Oracles","description":"A price oracle is any tool used to view price information about a given asset. When you look at stock prices on your phone, you are using your phone as a price oracle. Similarly, the app on your phone relies on devices to retrieve price information - likely several, which are aggregated and then displayed to you, the end-user. These are price oracles as well.","permalink":"/concepts/core-concepts/04-oracles"},{"id":"reference/SDK/08-other-exports","title":"Other Exports","description":"The default export from jsbi.","permalink":"/reference/SDK/08-other-exports"},{"id":"concepts/governance/01-overview","title":"Overview","description":"Uni is deployed at 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984 on the Ethereum mainnet, and the Ropsten, Rinkeby, G\xf6rli, and Kovan testnets. It was built from commit ab22c08.","permalink":"/concepts/governance/01-overview"},{"id":"reference/SDK/03-pair","title":"Pair","description":"The Pair entity represents a Uniswap pair with a balance of each of its pair tokens.","permalink":"/reference/SDK/03-pair"},{"id":"reference/smart-contracts/pair","title":"Pair","description":"This documentation covers Uniswap-specific functionality. For ERC-20 functionality, see Pair (ERC-20).","permalink":"/reference/smart-contracts/pair"},{"id":"reference/smart-contracts/pair-erc-20","title":"Pair (ERC-20)","description":"This documentation covers ERC-20 functionality for denominating pool tokens. For Uniswap-specific functionality, see Pair.","permalink":"/reference/smart-contracts/pair-erc-20"},{"id":"concepts/core-concepts/02-pools","title":"Pools","description":"Each Uniswap liquidity pool is a trading venue for a pair of ERC20 tokens. When a pool contract is created, its balances of each token are 0; in order for the pool to begin facilitating trades, someone must seed it with an initial deposit of each token. This first liquidity provider is the one who sets the initial price of the pool. They are incentivized to deposit an equal value of both tokens into the pool. To see why, consider the case where the first liquidity provider deposits tokens at a ratio different from the current market rate. This immediately creates a profitable arbitrage opportunity, which is likely to be taken by an external party.","permalink":"/concepts/core-concepts/02-pools"},{"id":"concepts/advanced-topics/02-pricing","title":"Pricing","description":"As we learned in Protocol Overview, each pair on Uniswap is actually underpinned by a liquidity pool. Liquidity pools are smart contracts that hold balances of two unique tokens and enforces rules around depositing and withdrawing them. The primary rule is the constant product formula. When a token is withdrawn (bought), a proportional amount must be deposited (sold) to maintain the constant. The ratio of tokens in the pool, in combination with the constant product formula, ultimately determine the price that a swap executes at.","permalink":"/concepts/advanced-topics/02-pricing"},{"id":"guides/javascript-sdk/03-pricing","title":"Pricing","description":"Looking for a quickstart?","permalink":"/guides/javascript-sdk/03-pricing"},{"id":"concepts/governance/02-process","title":"Process","description":"This document is a living document which represents the current process guidelines for developing and advancing Uniswap Governance Proposals.","permalink":"/concepts/governance/02-process"},{"id":"guides/smart-contract-integration/03-providing-liquidity","title":"Providing Liquidity","description":"Introduction","permalink":"/guides/smart-contract-integration/03-providing-liquidity"},{"id":"reference/API/03-queries","title":"Queries","description":"The subgraph can be queried to retrieve important information about Uniswap, pairs, tokens, transactions, users, and more. This page will provide examples for common queries.","permalink":"/reference/API/03-queries"},{"id":"concepts/advanced-topics/06-research","title":"Research","description":"The automated market maker is a new concept, and as such, new research comes out frequently. We\'ve selected some of the most thoughtful here.","permalink":"/concepts/advanced-topics/06-research"},{"id":"reference/SDK/04-route","title":"Route","description":"The Route entity represents one or more ordered Uniswap pairs with a fully specified path from input token to output token.","permalink":"/reference/SDK/04-route"},{"id":"reference/smart-contracts/router01","title":"Router01","description":"UniswapV2Router01 should not be used any longer, because of the discovery of a low severity bug and the fact that some methods do not work with tokens that take fees on transfer. The current recommendation is to use UniswapV2Router02.","permalink":"/reference/smart-contracts/router01"},{"id":"reference/smart-contracts/router02","title":"Router02","description":"Because routers are stateless and do not hold token balances, they can be replaced safely and trustlessly, if necessary. This may happen if more efficient smart contract patterns are discovered, or if additional functionality is desired. For this reason, routers have release numbers, starting at 01. This is currently recommended release, 02.","permalink":"/reference/smart-contracts/router02"},{"id":"guides/javascript-sdk/01-quick-start","title":"SDK Quick start","description":"The Uniswap SDK exists to help developers build on top of Uniswap. It\'s designed to run in any environment that can execute JavaScript (think websites, node scripts, etc.). While simple enough to use in a hackathon project, it\'s also robust enough to power production applications.","permalink":"/guides/javascript-sdk/01-quick-start"},{"id":"concepts/advanced-topics/04-security","title":"Security","description":"Between January 8 and April 30, a team of six engineers reviewed and formally verified crucial components of the smart contracts for Uniswap V2.","permalink":"/concepts/advanced-topics/04-security"},{"id":"guides/smart-contract-integration/01-quick-start","title":"Smart Contract Quick start","description":"Developing smart contracts for Ethereum involves a bevy of off-chain tools used for producing and testing bytecode","permalink":"/guides/smart-contract-integration/01-quick-start"},{"id":"concepts/protocol-overview/03-smart-contracts","title":"Smart contracts","description":"Uniswap V2 is a binary smart contract system. Core contracts provide fundamental safety guarantees for all parties interacting with Uniswap. Periphery contracts interact with one or more core contracts but are not themselves part of the core.","permalink":"/concepts/protocol-overview/03-smart-contracts"},{"id":"concepts/core-concepts/01-swaps","title":"Swaps","description":"Token swaps in Uniswap are a simple way to trade one ERC-20 token for another.","permalink":"/concepts/core-concepts/01-swaps"},{"id":"reference/SDK/02-token","title":"Token","description":"The Token entity represents an ERC-20 token at a specific address on a specific chain.","permalink":"/reference/SDK/02-token"},{"id":"reference/SDK/05-trade","title":"Trade","description":"The Trade entity represents a fully specified trade along a route. This entity supplies all the information necessary to craft a router transaction.","permalink":"/reference/SDK/05-trade"},{"id":"guides/javascript-sdk/04-trading","title":"Trading","description":"Looking for a quickstart?","permalink":"/guides/javascript-sdk/04-trading"},{"id":"concepts/advanced-topics/03-understanding-returns","title":"Understanding Returns","description":"Uniswap incentivizes users to add liquidity to trading pools by rewarding providers with the fees generated when other users trade with those pools. Market making, in general, is a complex activity. There is a risk of losing money during large and sustained movement in the underlying asset price compared to simply holding an asset.","permalink":"/concepts/advanced-topics/03-understanding-returns"},{"id":"guides/interface-integration/01-using-the-api","title":"Using the API","description":"In this guide we will create a web interface that consumes and displays data from the Uniswap Subgraph. The goal is to provide a quick overview of a setup that you can extend to create your own UIs and analytics around Uniswap data.","permalink":"/guides/interface-integration/01-using-the-api"}],"allTagsPath":"/tags"}')}}]);