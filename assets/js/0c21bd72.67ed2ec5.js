"use strict";(self.webpackChunk_manekiswap_document=self.webpackChunk_manekiswap_document||[]).push([[8548],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=p(n),k=o,m=d["".concat(l,".").concat(k)]||d[k]||c[k]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7236:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return m}});var r,o=n(7462),a=n(3366),i=(n(7294),n(3905)),u=["components"],l={id:"03-pair",title:"Pair",tags:["sdk","documentation"]},p=void 0,s={unversionedId:"reference/SDK/03-pair",id:"reference/SDK/03-pair",isDocsHomePage:!1,title:"Pair",description:"The Pair entity represents a Uniswap pair with a balance of each of its pair tokens.",source:"@site/docs/reference/SDK/03-pair.md",sourceDirName:"reference/SDK",slug:"/reference/SDK/03-pair",permalink:"/reference/SDK/03-pair",editUrl:"https://github.com/manekiswap/manekiswap.github.io/edit/master/docs/reference/SDK/03-pair.md",tags:[{label:"sdk",permalink:"/tags/sdk"},{label:"documentation",permalink:"/tags/documentation"}],version:"current",sidebarPosition:3,frontMatter:{id:"03-pair",title:"Pair",tags:["sdk","documentation"]},sidebar:"tutorialSidebar",previous:{title:"Token",permalink:"/reference/SDK/02-token"},next:{title:"Route",permalink:"/reference/SDK/04-route"}},c=[{value:"getAddress",id:"getaddress",children:[],level:2},{value:"liquidityToken",id:"liquiditytoken",children:[],level:2},{value:"token0",id:"token0",children:[],level:2},{value:"token1",id:"token1",children:[],level:2},{value:"reserve0",id:"reserve0",children:[],level:2},{value:"reserve1",id:"reserve1",children:[],level:2},{value:"reserveOf",id:"reserveof",children:[],level:2},{value:"getOutputAmount",id:"getoutputamount",children:[],level:2},{value:"getInputAmount",id:"getinputamount",children:[],level:2},{value:"getLiquidityMinted",id:"getliquidityminted",children:[],level:2},{value:"getLiquidityValue",id:"getliquidityvalue",children:[],level:2}],d=(r="Link",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),k={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,u);return(0,i.kt)("wrapper",(0,o.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount)\n")),(0,i.kt)("p",null,"The Pair entity represents a Uniswap pair with a balance of each of its pair tokens."),(0,i.kt)("h1",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"import { ChainId, Token, TokenAmount, Pair } from '@uniswap/sdk'\n\nconst HOT = new Token(ChainId.MAINNET, '0xc0FFee0000000000000000000000000000000000', 18, 'HOT', 'Caffeine')\nconst NOT = new Token(ChainId.MAINNET, '0xDeCAf00000000000000000000000000000000000', 18, 'NOT', 'Caffeine')\n\nconst pair = new Pair(new TokenAmount(HOT, '2000000000000000000'), new TokenAmount(NOT, '1000000000000000000'))\n")),(0,i.kt)("h1",{id:"static-methods"},"Static Methods"),(0,i.kt)("h2",{id:"getaddress"},"getAddress"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getAddress(tokenA: Token, tokenB: Token): string\n")),(0,i.kt)("p",null,"Computes the pair address for the passed ",(0,i.kt)(d,{to:"/docs/v2/SDK/token",mdxType:"Link"},"Token"),"s. See ",(0,i.kt)(d,{to:"/docs/v2/javascript-SDK/getting-pair-addresses/",mdxType:"Link"},"Pair Addresses"),"."),(0,i.kt)("h1",{id:"properties"},"Properties"),(0,i.kt)("h2",{id:"liquiditytoken"},"liquidityToken"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"liquidityToken: Token\n")),(0,i.kt)("p",null,"A Token representing the liquidity token for the pair. See ",(0,i.kt)(d,{to:"/docs/v2/smart-contracts/pair-erc-20",mdxType:"Link"},"Pair (ERC-20)"),"."),(0,i.kt)("h2",{id:"token0"},"token0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"token0: Token\n")),(0,i.kt)("p",null,"See ",(0,i.kt)(d,{to:"/docs/v2/smart-contracts/pair/#token0",mdxType:"Link"}),"."),(0,i.kt)("h2",{id:"token1"},"token1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"token1: Token\n")),(0,i.kt)("p",null,"See ",(0,i.kt)(d,{to:"/docs/v2/smart-contracts/pair/#token1",mdxType:"Link"}),"."),(0,i.kt)("h2",{id:"reserve0"},"reserve0"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"reserve0: TokenAmount\n")),(0,i.kt)("p",null,"The reserve of token0."),(0,i.kt)("h2",{id:"reserve1"},"reserve1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"reserve1: TokenAmount\n")),(0,i.kt)("p",null,"The reserve of token1."),(0,i.kt)("h1",{id:"methods"},"Methods"),(0,i.kt)("h2",{id:"reserveof"},"reserveOf"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"reserveOf(token: Token): TokenAmount\n")),(0,i.kt)("p",null,"Returns reserve0 or reserve1, depending on whether token0 or token1 is passed in."),(0,i.kt)("h2",{id:"getoutputamount"},"getOutputAmount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair]\n")),(0,i.kt)("p",null,"Pricing function for exact input amounts. Returns maximum output amount based on current reserves and the new Pair that would exist if the trade were executed."),(0,i.kt)("h2",{id:"getinputamount"},"getInputAmount"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair]\n")),(0,i.kt)("p",null,"Pricing function for exact output amounts. Returns minimum input amount based on current reserves and the new Pair that would exist if the trade were executed."),(0,i.kt)("h2",{id:"getliquidityminted"},"getLiquidityMinted"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount\n")),(0,i.kt)("p",null,"Calculates the exact amount of liquidity tokens minted from a given amount of token0 and token1."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"totalSupply must be looked up on-chain."),(0,i.kt)("li",{parentName:"ul"},"The value returned from this function ",(0,i.kt)("em",{parentName:"li"},"cannot")," be used as an input to getLiquidityValue.")),(0,i.kt)("h2",{id:"getliquidityvalue"},"getLiquidityValue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"getLiquidityValue(\n  token: Token,\n  totalSupply: TokenAmount,\n  liquidity: TokenAmount,\n  feeOn: boolean = false,\n  kLast?: BigintIsh\n): TokenAmount\n")),(0,i.kt)("p",null,"Calculates the exact amount of token0 or token1 that the given amount of liquidity tokens represent."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"totalSupply must be looked up on-chain."),(0,i.kt)("li",{parentName:"ul"},"If the protocol charge is on, feeOn must be set to true, and kLast must be provided from an on-chain lookup."),(0,i.kt)("li",{parentName:"ul"},"Values returned from this function ",(0,i.kt)("em",{parentName:"li"},"cannot")," be used as inputs to getLiquidityMinted.")))}m.isMDXComponent=!0}}]);